//@ sourceMappingURL=generator.map
// Generated by CoffeeScript 1.6.1
(function() {
  "use strict";
  var Generator,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  Generator = (function() {

    function Generator(config) {
      this.dict = {
        article: new Dict,
        comment: new Dict
      };
      this.libs = {
        forbiddenLastWords: config.libs.forbiddenLastWords,
        nicknames: [],
        months: config.libs.months
      };
      this.cache = {
        nicknamesLen: 0
      };
      this.configure(config);
      this.init();
    }

    Generator.prototype.configure = function(config, firstInit) {
      if (firstInit == null) {
        firstInit = true;
      }
      this.config = {
        paragraphs: {
          min: +config.paragraphs.min > 0 ? +config.paragraphs.min : 6,
          max: +config.paragraphs.max > 0 ? +config.paragraphs.max : 20
        },
        sentences: {
          min: +config.sentences.min > 0 ? +config.sentences.min : 6,
          max: +config.sentences.max > 0 ? +config.sentences.max : 14
        },
        words: {
          min: +config.words.min > 0 ? +config.words.min : 9,
          max: +config.words.min > 0 ? +config.words.max : 17
        }
      };
      if (firstInit) {
        this.config.content = config.content;
        return this.config.npref = +config.npref > 0 ? +config.npref : 2;
      }
    };

    Generator.prototype.init = function() {
      var $articles, self;
      $articles = this.config.content.match(/<article>[\s\S]*?<\/article>/g);
      self = this;
      $.map($articles, function(article) {
        var $article, $comments;
        $article = $(article);
        $comments = $article.find('.comment');
        $.map($comments, function(comment) {
          return self.parseComment($(comment));
        });
        return self.parseArticle($article.find('.comments').remove().end());
      });
      return this.cache.nicknamesLen = this.libs.nicknames.length;
    };

    Generator.prototype.removePre = function($el) {
      return $el.find('pre').remove().end();
    };

    Generator.prototype.parseComment = function($comment) {
      var username, words;
      $comment = this.removePre($comment);
      username = $comment.children('.username').text();
      this.libs.nicknames.push(username);
      words = $comment.find('.message').text().split(/\s/).filter(function(item) {
        return item !== "";
      });
      return this.dict.comment.add(words, this.config.npref);
    };

    Generator.prototype.parseArticle = function($article) {
      var words;
      $article = this.removePre($article);
      words = $article.text().split(/\s/).filter(function(item) {
        return item !== "";
      });
      return this.dict.article.add(words, this.config.npref);
    };

    Generator.prototype.generateText = function(dict, minWords, maxWords) {
      var lastI, p, text;
      minWords--;
      maxWords--;
      text = [];
      dict.shuffle();
      while (dict.isValid) {
        text.push(dict.current());
        p = (text.length - minWords) / (maxWords - minWords);
        lastI = text.length - 1;
        if ((maxWords <= lastI || p > Math.random()) && text[lastI].match(/[^,:-]/)) {
          if (this.lastWordIsValid(text[lastI])) {
            if (text[lastI].match(/[^.!?]/)) {
              text.push('.');
            }
            break;
          } else {
            text.pop();
          }
        }
        dict.next();
      }
      return text.join(' ');
    };

    Generator.prototype.lastWordIsValid = function(word) {
      var _ref;
      return !(_ref = word.toLowerCase(), __indexOf.call(this.libs.forbiddenLastWords, _ref) >= 0);
    };

    Generator.prototype.generateTitle = function() {
      var text;
      text = this.generateText(this.dict.article, this.config.words.min, this.config.words.max);
      return text = this.purifyText(text);
    };

    Generator.prototype.generateArticle = function() {
      var i, pCount, sCount, temp, text, _i;
      pCount = Helper.getRandomInt(this.config.paragraphs.min, this.config.paragraphs.max);
      text = '';
      for (i = _i = 1; 1 <= pCount ? _i <= pCount : _i >= pCount; i = 1 <= pCount ? ++_i : --_i) {
        sCount = Helper.getRandomInt(this.config.sentences.min, this.config.sentences.max);
        temp = this.generateText(this.dict.article, sCount * this.config.words.min, sCount * this.config.words.max);
        text += this.purifyText(temp);
        if (i !== pCount) {
          text += "<br/><br/>";
        }
      }
      return text;
    };

    Generator.prototype.generateComment = function() {
      var i, pCount, sCount, temp, text, _i;
      pCount = 1;
      text = '';
      for (i = _i = 1; 1 <= pCount ? _i <= pCount : _i >= pCount; i = 1 <= pCount ? ++_i : --_i) {
        sCount = Helper.getRandomInt(this.config.sentences.min, this.config.sentences.max);
        temp = this.generateText(this.dict.comment, sCount * this.config.words.min, sCount * this.config.words.max);
        text += this.purifyText(temp) + "<br/><br/>";
      }
      return text;
    };

    Generator.prototype.generateNick = function() {
      var i;
      i = Helper.getRandomInt(0, this.cache.nicknamesLen);
      return this.libs.nicknames[i];
    };

    Generator.prototype.generateTime = function() {
      var date, now, startDate;
      startDate = new Date(2013, 1, 1).getTime();
      now = new Date().getTime();
      date = new Date(Helper.getRandomInt(startDate, now));
      return ("" + (date.getDay() + 1) + " " + this.libs.months[date.getMonth()] + " ") + ("" + (date.getFullYear()) + " в " + (this.pad(date.getHours())) + ":" + (this.pad(date.getMinutes())));
    };

    Generator.prototype.pad = function(n) {
      if (n < 10) {
        return '0' + n;
      } else {
        return n;
      }
    };

    Generator.prototype.purifyText = function(text) {
      text = text.replace(/(?:(?:https?|ftp):\/\/)*(?:www.|ftp.)*[А-я\w.-]+\.[A-z]{2,4}/gi, '');
      text = text.replace(/&\w+;|&#\d+;/g, ' ');
      text = text.replace(/([!?.:,—])/g, ' $1 ');
      text = text.replace(/<\/?[^>]+>/g, '');
      text = text.replace(/(т . е .|т . к .|т . п .|т . д .|т . о .|с . м .|д . р .|у . e .)/g, function(result) {
        switch (result) {
          case 'т . е .':
            return 'то есть';
          case 'т . к .':
            return 'так как';
          case 'т . п .':
            return 'тому подобное';
          case 'т . д .':
            return 'так далее.';
          case 'т . о .':
            return 'таким образом';
          case 'с . м .':
            return 'смотрите';
          case 'д . р .':
            return 'другое';
          case 'y . e .':
            return 'евро';
        }
      });
      text = text.replace(/\s+([!?.:,])/g, '$1');
      text = text.replace(/[^A-zА-яёЁ0-9\s!?.,:\-—<>#]/g, '');
      text = text.replace(/\n|^\s*—\s+/g, '');
      text = text.replace(/([!?.:,—])(?:\s?[!?.:,—])+/g, '$1');
      text = text.replace(/\s+/g, ' ');
      text = text.replace(/<br\/>[a-zа-яё]/g, function(firstChart) {
        return firstChart.toUpperCase();
      });
      text = text.replace(/(?:^\s*|[!?.]\s)[a-zа-яё]/g, function(result) {
        return result.toUpperCase();
      });
      return text;
    };

    Generator.prototype.generateImage = function(query) {
      return $.when($.ajax('http://ajax.googleapis.com/ajax/services/search/images', {
        data: {
          v: '1.0',
          rsz: 1,
          q: query
        },
        dataType: 'jsonp'
      })).then(this.onSuccessGenerateImage, this.onFailureGenerateImage);
    };

    Generator.prototype.onSuccessGenerateImage = function(data) {
      var $img;
      if ((data.responseData != null) && (data.responseData.results != null)) {
        data = data.responseData.results[0];
        if (data.width > 600) {
          data.width = '600';
        }
        $img = $('<img>', {
          src: data.url,
          width: data.width,
          alt: data.titleNoFormatting
        });
        return $('.content').prepend($img, '<br><br>');
      }
    };

    Generator.prototype.onFailureGenerateImage = function(e) {
      return alert('Произошла ошибка при получении данных с Google.com');
    };

    return Generator;

  })();

  this.Generator = Generator;

}).call(this);
