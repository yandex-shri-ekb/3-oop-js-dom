//@ sourceMappingURL=app.map
// Generated by CoffeeScript 1.6.1
(function() {
  "use strict";
  var App;

  App = (function() {

    function App() {
      this.$article = $('#article');
      this.view = {
        $title: this.$article.find('.post_title'),
        $content: this.$article.find('.content'),
        $author: this.$article.find('.author a'),
        $commentsCount: this.$article.find('.comments_count'),
        $comments: this.$article.find('.comments_list'),
        $form: this.$article.find('form'),
        $overlay: $('.overlay')
      };
      this.isRun = false;
      this.assignEvents();
    }

    App.prototype.assignEvents = function() {
      return $(document).on('click', '.run-btn', $.proxy(this.onClickRunBtn, this));
    };

    App.prototype.onClickRunBtn = function(e) {
      if (this.isRun) {
        return false;
      }
      this.isRun = true;
      this.runApp();
      return false;
    };

    App.prototype.runApp = function() {
      if (!this.generator) {
        this.view.$overlay.show();
        return $.when($.ajax('books/habr.html')).done($.proxy(this.onSuccessRun, this)).fail($.proxy(this.onFailRun, this)).always($.proxy(this.onAlwaysRun, this));
      } else {
        this.runWriter();
        return this.generator.configure(this.getConfig(''), false);
      }
    };

    App.prototype.onSuccessRun = function(content) {
      this.generator = new Generator(this.getConfig(content));
      this.runWriter();
      return this.$article.show();
    };

    App.prototype.onFailRun = function(e) {
      return alert("Произошла ошибка при загрузки статьи. Пожалуйста, повторите через несколько минут.");
    };

    App.prototype.onAlwaysRun = function() {
      return this.view.$overlay.css('display', 'none');
    };

    App.prototype.runWriter = function() {
      this.writeArticle();
      this.writeComments();
      return this.isRun = false;
    };

    App.prototype.writeArticle = function() {
      var author, title;
      this.view.$content.html(this.generator.generateArticle());
      title = this.generator.generateTitle();
      author = this.generator.generateNick();
      this.view.$title.html(title);
      this.view.$author.html(author);
      return this.generator.generateImage(title);
    };

    App.prototype.writeComments = function() {
      var $comment, $comments, $emptyComment, count, i, message, time, username, _i;
      count = Helper.getRandomInt(10, 20);
      $emptyComment = this.$article.find('.comment_item').filter('.hidden');
      $comments = $();
      for (i = _i = 0; 0 <= count ? _i <= count : _i >= count; i = 0 <= count ? ++_i : --_i) {
        $comment = $emptyComment.clone();
        message = this.generator.generateComment();
        username = this.generator.generateNick();
        time = this.generator.generateTime();
        $comment.find('.message').html(message);
        $comment.find('.username').html(username);
        $comment.find('time').text(time);
        $comments = $comments.add($comment);
      }
      $comments.removeClass('hidden');
      this.view.$commentsCount.text(count);
      return this.view.$comments.append($comments);
    };

    App.prototype.getConfig = function(content) {
      var config, form;
      form = this.view.$form;
      return config = {
        content: content,
        npref: form.find('[name=npref]').val(),
        words: {
          min: form.find('[name=words_min]').val(),
          max: form.find('[name=words_max]').val()
        },
        sentences: {
          min: form.find('[name=sentences_min]').val(),
          max: form.find('[name=sentences_max]').val()
        },
        paragraphs: {
          min: form.find('[name=paragraphs_min]').val(),
          max: form.find('[name=paragraphs_max]').val()
        },
        libs: {
          forbiddenLastWords: window.libs.forbiddenLastWords,
          months: window.libs.months
        }
      };
    };

    return App;

  })();

  this.App = App;

}).call(this);
